swagger: '2.0'

info:
  version: 1.0.0
  title: Simple API
  description: My simple API to learn how to write OpenAPI specifications

schemes: 
  - http
host: simple.api
basePath: /openapi101
paths:
  /persons:
    get:
      summary: Return some persons
      description: Returns a list containing many persons
      parameters: 
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/pageNumber'
      responses:
        200:
          description: a list of person
          schema:
            $ref: '#/definitions/Persons'
        500:
          $ref: '#/responses/Standard500ErrorResponse'
    post:
      summary: create a person
      description: send a person to be made
      parameters:
        - name: person
          in: body
          description: person to create
          schema:
            $ref: '#/definitions/Person'
      responses:
        200:
          description: OK
        500:
          $ref: '#/responses/Standard500ErrorResponse'
  /persons/{username}/friends:
    parameters:
      - $ref: "#/parameters/username"
    get:
      summary: Gets a person's friends
      description: Returns a list containing all persons. The list supports paging.
      parameters:
       - $ref: "#/parameters/pageSize"
       - $ref: "#/parameters/pageNumber"     
      responses:
        500:
          $ref: '#/responses/Standard500ErrorResponse'
        
  /persons/{username}:
    parameters: 
      - $ref: '#/parameters/username'
    get:
      summary: gets specific person
      description: returns a single person for its username
      responses:
        200:
          description: a persons
          schema:
            $ref: '#/definitions/Person'
        404:
          description: This person does not exist
        500:
          $ref: '#/responses/Standard500ErrorResponse'
definitions:
  PagedPersonsv2:
    allOf: 
      - $ref: '#/definitions/Persons'
      - $ref: '#/definitions/Paging'
  PagedPersons:
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Person'
      paging:
        $ref: '#/definitions/Paging'
        
  
  Paging:
    properties:
      totalItems:
        type: integer
      totalPages:
        type: integer
      pageSize:
        type: integer
      currentPage:
        type: integer
  Persons:
    properties:
      items:
        type: array
        minItems: 10
        maxItems: 100
        uniqueItems: true
        items:
          $ref: '#/definitions/Person'
  Person:
    required:
      - username
    properties:
      firstName:
        type: string
      lastName:
        type: string
      username:
        type: string
        pattern: '[\w\d]{8,64}'
        minLength: 8
        maxLength: 64
      dateOfBirth:
        type: string
        format: date
      lastTimeOnline:
        type: string
        format: date-time
        readOnly: true
  Error:
    properties:
      code:
        type: string
        enum: 
          - DBERR
          - NTERR
          - UNERR
      message:
        type: string
parameters:
  username:
    name: username
    in: path
    required: true
    description: the persons name
    type: string
  pageSize:
    name: pageSize
    in: query
    description: number of persons returned
    type: integer
    format: int32
    minimum: 0
    maximum: 100
    exclusiveMinimum: true
    exclusiveMaximum: false
    multipleOf: 10
  pageNumber:
    name: pageNumber
    in: query
    description: Page number
    type: integer
responses:
  Standard500ErrorResponse:
    description: An unexpected error occured.
    schema:
      $ref: "#/definitions/Error"
  